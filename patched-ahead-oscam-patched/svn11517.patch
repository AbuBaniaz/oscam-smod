Index: /trunk/module-cacheex.c
===================================================================
--- /trunk/module-cacheex.c	(revision 11516)
+++ /trunk/module-cacheex.c	(revision 11517)
@@ -664,30 +664,30 @@
 	}
 
-	uint8_t selectedForIgnChecksum = chk_if_ignore_checksum(er, cfg.disablecrccws, &cfg.disablecrccws_only_for);
-			if (cl->typ == 'c') {
-				selectedForIgnChecksum += chk_if_ignore_checksum (er, cl->account->disablecrccacheex, &cl->account->disablecrccacheex_only_for);
-			}
-			if (cl->typ == 'p') {
-				selectedForIgnChecksum += chk_if_ignore_checksum (er, cl->reader->disablecrccws, &cl->reader->disablecrccws_only_for);
-			}
-
-	uint8_t i, c;
-	if(cfg.disablecrccws == 0 || (cl->typ == 'c' && cl->account->disablecrccacheex == 0) || ( cl->typ == 'p' && cl->reader->disablecrccws == 0))
-	{
-		for(i = 0; i < 16; i += 4)
-		{
-			c = ((er->cw[i] + er->cw[i + 1] + er->cw[i + 2]) & 0xff);
-
-			if((i!=12) && selectedForIgnChecksum && (er->cw[i + 3] != c)){
-				break;
-			}
-
-			if(er->cw[i + 3] != c)
-			{
-				cs_log_dump_dbg(D_CACHEEX, er->cw, 16, "push received cw with chksum error from %s", csp ? "csp" : username(cl));
-				cl->cwcacheexerr++;
-				if(cl->account)
-					{ cl->account->cwcacheexerr++; }
-				return 0;
+	if(!cfg.disablecrccws && ((cl->typ == 'c' && !cl->account->disablecrccacheex) || ( cl->typ == 'p' && !cl->reader->disablecrccws)))
+	{
+		uint8_t selectedForIgnChecksum = chk_if_ignore_checksum(er, &cfg.disablecrccws_only_for);
+		if(cl->typ == 'c')
+		{
+			selectedForIgnChecksum += chk_if_ignore_checksum(er, &cl->account->disablecrccacheex_only_for);
+		}
+		if(cl->typ == 'p')
+		{
+			selectedForIgnChecksum += chk_if_ignore_checksum(er, &cl->reader->disablecrccws_only_for);
+		}
+		if(!selectedForIgnChecksum)
+		{
+			uint8_t i, c;
+			for(i = 0; i < 16; i += 4)
+			{
+				c = ((er->cw[i] + er->cw[i + 1] + er->cw[i + 2]) & 0xff);
+
+				if(er->cw[i + 3] != c)
+				{
+					cs_log_dump_dbg(D_CACHEEX, er->cw, 16, "push received cw with chksum error from %s", csp ? "csp" : username(cl));
+					cl->cwcacheexerr++;
+					if(cl->account)
+						{ cl->account->cwcacheexerr++; }
+					return 0;
+				}
 			}
 		}
Index: /trunk/oscam-chk.c
===================================================================
--- /trunk/oscam-chk.c	(revision 11516)
+++ /trunk/oscam-chk.c	(revision 11517)
@@ -725,7 +725,7 @@
 }
 
-uint8_t chk_if_ignore_checksum(ECM_REQUEST *er, int8_t disablecrc, FTAB *disablecrc_only_for)
-{
-	if(!disablecrc && !disablecrc_only_for->nfilts) { return 0; }
+uint8_t chk_if_ignore_checksum(ECM_REQUEST *er, FTAB *disablecrc_only_for)
+{
+	if(!disablecrc_only_for->nfilts) { return 0; }
 
 	int32_t i, k;
Index: /trunk/oscam-chk.h
===================================================================
--- /trunk/oscam-chk.h	(revision 11516)
+++ /trunk/oscam-chk.h	(revision 11517)
@@ -9,5 +9,5 @@
 int32_t ecm_ratelimit_check(struct s_reader *reader, ECM_REQUEST *er, int32_t reader_mode);
 int32_t matching_reader(ECM_REQUEST *er, struct s_reader *rdr);
-uint8_t chk_if_ignore_checksum(ECM_REQUEST *er, int8_t disablecrc, FTAB *disablecrc_only_for);
+uint8_t chk_if_ignore_checksum(ECM_REQUEST *er, FTAB *disablecrc_only_for);
 
 uint8_t is_localreader(struct s_reader *rdr, ECM_REQUEST *er);
Index: /trunk/oscam-ecm.c
===================================================================
--- /trunk/oscam-ecm.c	(revision 11516)
+++ /trunk/oscam-ecm.c	(revision 11517)
@@ -1593,6 +1593,4 @@
 		{ return 0; }
 
-	int32_t i;
-	uint8_t c;
 	struct timeb now;
 	cs_ftime(&now);
@@ -1640,55 +1638,54 @@
 	if(reader && cw && rc < E_NOTFOUND)
 	{
-		if(cfg.disablecrccws == 0 && reader->disablecrccws == 0)
-		{
-			uint8_t selectedForIgnChecksum = chk_if_ignore_checksum(er, cfg.disablecrccws, &cfg.disablecrccws_only_for)
-					+ chk_if_ignore_checksum(er, reader->disablecrccws, &reader->disablecrccws_only_for);
-
-			for(i = 0; i < 16; i += 4)
-			{
-				c = ((cw[i] + cw[i + 1] + cw[i + 2]) & 0xff);
-
-				if(selectedForIgnChecksum && (cw[i + 3] != c))
+		if(!cfg.disablecrccws && !reader->disablecrccws)
+		{
+			if(!(chk_if_ignore_checksum(er, &cfg.disablecrccws_only_for) + chk_if_ignore_checksum(er, &reader->disablecrccws_only_for)))
+			{
+				uint8_t i, c;
+				for(i = 0; i < 16; i += 4)
 				{
-					cs_log_dbg(D_TRACE, "notice: CW checksum check disabled for %04X:%06X", er->caid, er->prid);
-					break;
-				}
-
-				if(cw[i + 3] != c)
-				{
-					uint8_t nano = 0x00;
-					if(er->caid == 0x100 && er->ecm[5] > 0x00)
+					c = ((cw[i] + cw[i + 1] + cw[i + 2]) & 0xff);
+
+					if(cw[i + 3] != c)
 					{
-						nano = er->ecm[5]; // seca nano protection
-					}
-
-					if(reader->dropbadcws && !nano) // only drop controlword if no cw encryption is applied
-					{
-						rc = E_NOTFOUND;
-						rcEx = E2_WRONG_CHKSUM;
-						break;
-					}
-					else
-					{
-						if(!nano) // only fix checksum if no cw encryption is applied (nano = 0)
+						uint8_t nano = 0x00;
+						if(er->caid == 0x100 && er->ecm[5] > 0x00)
 						{
-							cs_log_dbg(D_TRACE, "notice: changed dcw checksum byte cw[%i] from %02x to %02x", i + 3, cw[i + 3], c);
-							cw[i + 3] = c;
+							nano = er->ecm[5]; // seca nano protection
+						}
+
+						if(reader->dropbadcws && !nano) // only drop controlword if no cw encryption is applied
+						{
+							rc = E_NOTFOUND;
+							rcEx = E2_WRONG_CHKSUM;
+							break;
 						}
 						else
 						{
-							if(i == 12) // there are servers delivering correct controlwords but with failing last cw checksum (on purpose?!)
+							if(!nano) // only fix checksum if no cw encryption is applied (nano = 0)
 							{
-								cs_log_dbg(D_TRACE,"NANO%02d: BAD PEER DETECTED, oscam has fixed the last cw crc that wasn't matching!", nano);
-								cw[i + 3] = c; // fix the last controlword
+								cs_log_dbg(D_TRACE, "notice: changed dcw checksum byte cw[%i] from %02x to %02x", i + 3, cw[i + 3], c);
+								cw[i + 3] = c;
 							}
 							else
 							{
-								cs_log_dbg(D_TRACE,"NANO%02d: not fixing the crc of this cw since its still encrypted!", nano);
-								break; // crc failed so stop!
+								if(i == 12) // there are servers delivering correct controlwords but with failing last cw checksum (on purpose?!)
+								{
+									cs_log_dbg(D_TRACE,"NANO%02d: BAD PEER DETECTED, oscam has fixed the last cw crc that wasn't matching!", nano);
+									cw[i + 3] = c; // fix the last controlword
+								}
+								else
+								{
+									cs_log_dbg(D_TRACE,"NANO%02d: not fixing the crc of this cw since its still encrypted!", nano);
+									break; // crc failed so stop!
+								}
 							}
 						}
 					}
 				}
+			}
+			else
+			{
+				cs_log_dbg(D_TRACE, "notice: CW checksum check disabled for %04X:%06X", er->caid, er->prid);
 			}
 		}
